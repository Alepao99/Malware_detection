import numpy as np
import pandas as pd
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split

class Dataloader:
    
    header = ['duration', 'protocol_type', 'service', 'flag', 'src_bytes', 'dst_bytes',
        'land', 'wrong_fragment', 'urgent', 'hot', 'num_failed_logins', 'logged_in',
        'num_compromised', 'root_shell', 'su_attempted', 'num_root', 'num_file_creations',
        'num_shells', 'num_access_files', 'num_outbound_cmds', 'is_host_login', 'is_guest_login',
        'count', 'srv_count', 'serror_rate', 'srv_serror_rate', 'rerror_rate', 'srv_rerror_rate',
        'same_srv_rate', 'diff_srv_rate', 'srv_diff_host_rate', 'dst_host_count', 'dst_host_srv_count',
        'dst_host_same_srv_rate', 'dst_host_diff_srv_rate', 'dst_host_same_src_port_rate',
        'dst_host_srv_diff_host_rate', 'dst_host_serror_rate', 'dst_host_srv_serror_rate', 
        'dst_host_rerror_rate', 'dst_host_srv_rerror_rate', 'label', 'difficulty']
    
    categorical_features = ['protocol_type', 'service', 'flag', 'land', 'logged_in','is_host_login', 'is_guest_login', 
        'root_shell', 'su_attempted'] 
    
    def __init__(self, *args):
        self.__numerical_feaures = [item for item in Dataloader.header if item not in Dataloader.categorical_features]
        self.__numerical_feaures.remove('label')
        self.__numerical_feaures.remove('difficulty')
        self.__normaldf, self.__abnormaldf = self.__load_data(args)

    def __load_data(self, args):
        lastdatadf = pd.DataFrame()
        for d in args:
            datadf = pd.read_csv(d, names=Dataloader.header)
            datadf = pd.concat([lastdatadf,datadf])
            lastdatadf = datadf
        
        datadf['label'] = datadf['label'].astype('category')

        #One-hot-encoding of categorical features
        transformers_list = [
            ('cat', OneHotEncoder(dtype='int',drop='first',handle_unknown='ignore'), Dataloader.categorical_features), 
            ('num', MinMaxScaler(feature_range=(0, 1)), self.__numerical_feaures),
            ('skip', 'passthrough', ['label']),
            ('remove', 'drop', ['difficulty'])]
        
        column_transformer = ColumnTransformer(transformers_list)
        transformed_raw = column_transformer.fit_transform(datadf)

        datadf = pd.DataFrame(
            transformed_raw, 
            columns=column_transformer.get_feature_names_out()
        )

        datadf.fillna(datadf.mean(), inplace=True)
        datadf = datadf.rename(columns={"skip__label":"label"})
        normaldf = datadf[datadf['label'].isin(['normal'])]
        abnormaldf = datadf[~datadf['label'].isin(['normal'])]
        return normaldf,abnormaldf

    def get_data(self):
        return self.__normaldf, self.__abnormaldf
    
    
